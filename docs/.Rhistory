y = matrix(d$kid_score, ncol = 1)
load("datos/kidiq.Rdata")
str(d)
y = matrix(d$kid_score, ncol = 1)
head(y)
n = nrow(d)
X = cbind(rep(1,n), d$mom_iq, d$mom_age)
head(X)
Xt_X = t(X) %*% X
Xt_y = t(X) %*% y
( B = solve(Xt_X) %*% Xt_y )
y_e = X %*% B
View(d)
# en primer lugar vamos a calcular las matrices de covarianzas con la función de R cov()
(Sxx = cov(d[c(3,5),c(3,5)]) )
(Sxy = S(d[c(3,5),1]) )
# en primer lugar vamos a calcular las matrices de covarianzas con la función de R cov()
(Sxx = cov(d[c(3,5),c(3,5)]) )
(Sxy = cov(d[c(3,5),1]) )
# en primer lugar vamos a calcular las matrices de covarianzas con la función de R cov()
(Sxx = cov(d[,c(1,3,5)]) )
(Sxy = cov(d[,c(1,3,5)]) )
(Ba = solve(Sxx) %*% Sxy)
# en primer lugar vamos a calcular las matrices de covarianzas con la función de R cov()
(S = cov(d[,c(1,3,5)]) )
(Sxx = S[2:3,2:3])
(Sxy = S[2:3,1] )
(Ba = solve(Sxx) %*% Sxy)
ya = matrix(d$kid_score - mean(d$kid_score), ncol = 1)
Xa = cbind(d$mom_iq - mean(d$mom_iq), d$mom_age - mean(d$mom_age)) # sin columna de unos!!!!
ya = matrix(d$kid_score - mean(d$kid_score), ncol = 1)
Xa = cbind(d$mom_iq - mean(d$mom_iq), d$mom_age - mean(d$mom_age)) # sin columna de unos!!!!
n = nrow(d)
1/(n-1) * t(Xa) %*% Xa
1/(n-1) * t(Xa) %*% ya
( b0 = mean(d$kid_score) - colMeans(d[,c(3,5)]) %*% Ba )
(SRC = sum(e^2))
load("datos/kidiq.Rdata")
str(d)
plot(d$mom_iq, d$kid_score)
y = matrix(d$kid_score, ncol = 1)
head(y)
n = nrow(d)
X = cbind(rep(1,n), d$mom_iq, d$mom_age)
head(X)
Xt_X = t(X) %*% X
Xt_y = t(X) %*% y
( B = solve(Xt_X) %*% Xt_y )
y_e = X %*% B
e = y - y_e
(SRC = sum(e^2))
sum(d$kid_score^2) - t(B) %*% (Xt_y
sum(d$kid_score^2) - t(B) %*% Xt_y
# varianza de y
(sy2 = S[1,1] )
(SRC = (n-1)*sy2 - (n-1)*t(Ba) %*% Sxy)
load("datos/kidiq.Rdata")
str(d)
plot(d$mom_iq, d$kid_score)
y = matrix(d$kid_score, ncol = 1)
head(y)
n = nrow(d)
X = cbind(rep(1,n), d$mom_iq, d$mom_age)
head(X)
Xt_X = t(X) %*% X
Xt_y = t(X) %*% y
( B = solve(Xt_X) %*% Xt_y )
y_e = X %*% B
e = y - y_e
(SRC = sum(e^2))
sum(d$kid_score^2) - t(B) %*% Xt_y
(STC = sum((y-mean(y))^2))
(R2 = 1 - SRC/STC)
(n-1)*var(y)
# en primer lugar vamos a calcular las matrices de covarianzas con la función de R cov()
(S = cov(d[,c(1,3,5)]) )
(Sxx = S[2:3,2:3])
(Sxy = S[2:3,1] )
(Ba = solve(Sxx) %*% Sxy)
ya = matrix(d$kid_score - mean(d$kid_score), ncol = 1)
Xa = cbind(d$mom_iq - mean(d$mom_iq), d$mom_age - mean(d$mom_age)) # sin columna de unos!!!!
n = nrow(d)
1/(n-1) * t(Xa) %*% Xa
1/(n-1) * t(Xa) %*% ya
( b0 = mean(d$kid_score) - colMeans(d[,c(3,5)]) %*% Ba )
# varianza de y
(sy2 = S[1,1] )
(SRC = (n-1)*sy2 - (n-1)*t(Ba) %*% Sxy)
Por último, para la suma de los residuos al cuadrado se tiene que cumplir que:
load("datos/kidiq.Rdata")
str(d)
secundaria_si = ifelse(d$mom_hs == "si", 1, 0)
plot(d$mom_iq, d$kid_score)
# modelo para secundaria_si = 0
abline(a = m$coef[1], b = m$coef[2], col = "blue")
load("datos/kidiq.Rdata")
str(d)
secundaria_si = ifelse(d$mom_hs == "si", 1, 0)
m = lm(kid_score ~ mom_iq + secundaria_si, data = d)
coef(m)
plot(d$mom_iq, d$kid_score)
# modelo para secundaria_si = 0
abline(a = m$coef[1], b = m$coef[2], col = "blue")
# modelo para secundaria_si = 1
abline(a = m$coef[1] + m$coef[3], b = m$coef[2], col = "red")
m = lm(kid_score ~ mom_iq + mom_hs, data = d)
summary(m)
levels(d$mom_hs)
contrasts(d$mom_hs)
levels(d$mom_work)
notrabaja_si = ifelse(d$mom_work == "notrabaja", 1, 0)
trabaja23_si = ifelse(d$mom_work == "trabaja23", 1, 0)
trabaja1_parcial_si = ifelse(d$mom_work == "trabaja1p", 1, 0)
trabaja1_completo_si = ifelse(d$mom_work == "trabaja1c", 1, 0)
m = lm(kid_score ~ mom_iq + mom_hs, data = d)
summary(m)
m = lm(kid_score ~ mom_iq + secundaria_no, data = d)
load("datos/kidiq.Rdata")
str(d)
secundaria_si = ifelse(d$mom_hs == "si", 1, 0)
m = lm(kid_score ~ mom_iq + secundaria_si, data = d)
coef(m)
plot(d$mom_iq, d$kid_score)
# modelo para secundaria_si = 0
abline(a = m$coef[1], b = m$coef[2], col = "blue")
# modelo para secundaria_si = 1
abline(a = m$coef[1] + m$coef[3], b = m$coef[2], col = "red")
m = lm(kid_score ~ mom_iq + mom_hs, data = d)
summary(m)
levels(d$mom_hs)
contrasts(d$mom_hs)
secundaria_no = ifelse(d$mom_hs == "no", 1, 0)
m = lm(kid_score ~ mom_iq + secundaria_no, data = d)
coef(m)
d$mom_hs = relevel(d$mom_hs, ref = "si")
levels(d$mom_hs)
d$mom_hs1 = relevel(d$mom_hs, ref = "si")
levels(d$mom_hs1)
contrasts(d$mom_hs1)
m = lm(kid_score ~ mom_iq + mom_hs1, data = d)
summary(m)
m = lm(kid_score ~ mom_iq + trabaja23_si + trabaja1p_si + trabaja1c_si, data = d)
load("datos/kidiq.Rdata")
str(d)
secundaria_si = ifelse(d$mom_hs == "si", 1, 0)
m = lm(kid_score ~ mom_iq + secundaria_si, data = d)
coef(m)
plot(d$mom_iq, d$kid_score)
# modelo para secundaria_si = 0
abline(a = m$coef[1], b = m$coef[2], col = "blue")
# modelo para secundaria_si = 1
abline(a = m$coef[1] + m$coef[3], b = m$coef[2], col = "red")
m = lm(kid_score ~ mom_iq + mom_hs, data = d)
summary(m)
levels(d$mom_hs)
contrasts(d$mom_hs)
secundaria_no = ifelse(d$mom_hs == "no", 1, 0)
m = lm(kid_score ~ mom_iq + secundaria_no, data = d)
coef(m)
levels(d$mom_hs)
contrasts(d$mom_hs)
d$mom_hs1 = relevel(d$mom_hs, ref = "si")
levels(d$mom_hs1)
contrasts(d$mom_hs1)
m = lm(kid_score ~ mom_iq + mom_hs1, data = d)
summary(m)
m = lm(kid_score ~ 0 + mom_iq + secundaria_si + secundaria_no, data = d)
summary(m)
m = lm(kid_score ~ 0 + mom_iq + mom_hs, data = d)
summary(m)
levels(d$mom_work)
notrabaja_si = ifelse(d$mom_work == "notrabaja", 1, 0)
trabaja23_si = ifelse(d$mom_work == "trabaja23", 1, 0)
trabaja1p_si = ifelse(d$mom_work == "trabaja1p", 1, 0)
trabaja1c_si = ifelse(d$mom_work == "trabaja1c", 1, 0)
m = lm(kid_score ~ mom_iq + trabaja23_si + trabaja1p_si + trabaja1c_si, data = d)
summary(m)
m = lm(kid_score ~ mom_iq + mom_work, data = d)
summary(m)
knitr::opts_chunk$set(echo = TRUE)
load("datos/kidiq.Rdata")
str(d)
knitr::opts_chunk$set(echo = TRUE)
load("datos/kidiq.Rdata")
load("datos/kidiq.Rdata")
str(d)
m1 = lm(kid_score ~ . - mom_work, data = d)
summary(m1)
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print(files[ii])
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print(files[ii])
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print(files[ii])
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
files[ii]
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print(files[ii])
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
# render the whole dir
files = dir()
files
ii= 10
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
files[ii]
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print(files[ii])
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
# render the whole dir
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
xp = data.frame(
long_pico = c(39.8,46.1),
prof_pico = c(18.4,15.5),
long_aleta = c(192,202),
peso = c(3250,4000),
isla = c("Dream","Biscoe"),
genero = c("hembra","macho")
)
xp
## se leen los datos
d = read.csv("datos/pinguinos.csv", sep = ";")
# es conveniente convertir a factores las variables cualitativas
d$especie = factor(d$especie)
d$isla = factor(d$isla)
d$genero = factor(d$genero)
# se lee la funcion que normaliza
source("funciones/knn_funciones.R")
# se normalizan y se guardan en un data.frame
d1 = data.frame(
long_pico = knn_normaliza(d$long_pico),
prof_pico = knn_normaliza(d$prof_pico),
long_aleta = knn_normaliza(d$long_aleta),
peso = knn_normaliza(d$peso)
)
#
d1$isla_Bis = ifelse(d$isla == "Biscoe", 1, 0)
d1$isla_Dre = ifelse(d$isla == "Dream", 1, 0)
#
d1$genero_H = ifelse(d$genero == "hembra", 1, 0)
# variables cuantitativas normalizadas
xp1 = data.frame(
long_pico = knn_normaliza(c(39.8,46.1), min(d$long_pico), max(d$long_pico)),
prof_pico = knn_normaliza(c(18.4,15.5), min(d$prof_pico), max(d$prof_pico)),
long_aleta = knn_normaliza(c(192,202), min(d$long_aleta), max(d$long_aleta)),
peso = knn_normaliza(c(3250,4000), min(d$peso), max(d$peso))
)
# variables auxiliares
xp1$isla_Bis = c(0,1)
xp1$isla_Dre = c(1,0)
#
xp1$genero_H = c(1,0)
# se utiliza la funcion knn.reg del paquete FNN
yp = FNN::knn(d1, test = xp1, cl = d$especie, k = 3)
yp
# la especie de los k puntos más cercanos es
(p1 = attr(yp,"nn.index")[1,])
d$especie[p1]
# se crean los datos de entrenamiento y los datos test (80%-20%)
set.seed(678)
n = nrow(d)
pos_train = sample(1:n,round(0.8*n), replace = F)
train_x = d1[pos_train,]
test_x = d1[-pos_train,]
train_y = d$especie[pos_train]
test_y = d$especie[-pos_train]
# se utiliza la funcion knn.reg del paquete FNN
yp = FNN::knn(train_x, test = test_x, cl = train_y, k = 1)
# matriz de confusion
(t = table(test_y, yp))
# error
1 - sum(diag(t))/sum(t)
plot(d$long_pico, d$prof_pico, col = d$especie, pch = 19)
legend("bottomright", legend = c("Adelie","Chindstrap","Gentoo"), pch = 19, col = 1:3)
# se utilizan todos los datos
(yp = FNN::knn(d1, test = xp1, cl = d$especie, k = 1))
yp=FNN::knn.cv(train_x,train_y, k = 3)
str(yp)
(t = table(train_y,yp))
error = rep(0,20)
for (ii in 1:20){
yp = FNN::knn.cv(train_x,train_y, k = ii)
t = table(train_y,yp)
error[ii] = 1 - sum(diag(t))/sum(t)
}
plot(1:20,error, type = "b")
# render the whole dir
rm(list = ls())
files = dir()
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(ii,files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
for (ii in 1:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(ii)
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
for (ii in 11:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(ii)
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
for (ii in 19:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(ii)
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
# render the whole dir
rm(list = ls())
files = dir()
for (ii in 18:length(files)){
file1 = substr(files[ii],nchar(files[ii])-2,nchar(files[ii]))
if (file1 == "Rmd"){
print("*****************************")
print(ii)
print(files[ii])
print("*****************************")
#rmarkdown::render(file1)
rmarkdown::render(input = files[ii], output_format = "html_document")
rmarkdown::render(input = files[ii], output_format = "pdf_document")
}
}
